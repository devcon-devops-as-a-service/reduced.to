// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-arm64-openssl-1.1.x"]
  output        = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  name              String
  email             String         @unique
  password          String?
  role              Role           @default(USER)
  verified          Boolean        @default(false)
  verificationToken String?
  refreshToken      String?
  links             Link[]
  createdAt         DateTime       @default(now())
  authProviders     AuthProvider[]
  subscription      Subscription?
  usage             Usage?

  @@index(email)
  @@index(verificationToken)
}

model Subscription {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  plan      Plan
  status    String // e.g., 'active', 'cancelled'
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index(userId)
  @@index(plan)
  @@index(status)
  @@index(startDate)
  @@index(endDate)
}

model Usage {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  linksCount  Int      @default(0)
  linksLimit  Int      @default(5)
  clicksCount Int      @default(0)
  clicksLimit Int      @default(250)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index(userId)
}

enum Plan {
  FREE
  PRO
  BUSINESS
}

enum ProviderType {
  EMAIL
  GOOGLE
}

model AuthProvider {
  id         String       @id @default(uuid())
  provider   ProviderType
  providerId String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model Link {
  id             String    @id @default(uuid())
  key            String    @unique // Unique key of the link
  url            String
  favicon        String?
  password       String?
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  description    String?
  expirationTime DateTime?
  createdAt      DateTime  @default(now())
  Report         Report[]
  clicks         Int       @default(0)
  visit          Visit[]
  utm            Json?

  @@index(userId)
  @@index(key)
  @@index([url, clicks])
  @@index(createdAt)
  @@index(expirationTime)
}

model Report {
  id        String   @id @default(uuid())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId    String
  category  String?
  createdAt DateTime @default(now())

  @@index(linkId)
  @@index(category)
  @@index(createdAt)
}

model Visit {
  id        String   @id @default(uuid())
  ip        String // Hashed IP
  userAgent String?
  browser   String?
  os        String?
  device    String?
  referrer  String?
  country   String?
  region    String?
  city      String?
  geo       Json?
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId    String
  createdAt DateTime @default(now())

  @@index(linkId)
  @@index(ip)
  @@index(country)
  @@index(region)
  @@index(city)
  @@index(createdAt)
}

enum Role {
  USER
  ADMIN
}
