// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-arm64-openssl-1.1.x"]
  output        = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  name              String
  email             String         @unique
  password          String?
  role              Role           @default(USER)
  verified          Boolean        @default(false) // Is the mail verification
  verificationToken String?
  refreshToken      String?
  links             Link[]
  createdAt         DateTime       @default(now())
  authProviders     AuthProvider[]
}

enum ProviderType {
  EMAIL
  GOOGLE
}

model AuthProvider {
  id         String       @id @default(uuid())
  provider   ProviderType
  providerId String       @unique
  user       User         @relation(fields: [userId], references: [id])
  userId     String
}

model Link {
  id             String    @id @default(uuid())
  key            String    @unique // Unique key of the link
  url            String
  favicon        String?
  password       String?
  user           User?     @relation(fields: [userId], references: [id])
  userId         String
  description    String?
  expirationTime DateTime?
  createdAt      DateTime  @default(now())
  Report         Report[]
  clicks         Int       @default(0)
  Visit          Visit[]

  @@index(userId)
  @@index(key)
  @@index([url, clicks])
}

model Report {
  id        String   @id @default(uuid())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId    String
  category  String?
  createdAt DateTime @default(now())

  @@index(linkId)
  @@index(category)
}

model Visit {
  id        String   @id @default(uuid())
  ip        String // Hashed IP
  userAgent String?
  geo       Json?
  link      Link     @relation(fields: [linkId], references: [id])
  linkId    String
  createdAt DateTime @default(now())

  @@index(linkId)
}

enum Role {
  USER
  ADMIN
}
